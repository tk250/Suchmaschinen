<project default="all">
    <!-- You can change properties according to your project layout.
        However, this default is recommended and
        makes your tutor's life a lot easier. -->
    <property name="Main-class" value="QGramIndexMain" />
    <property name="jar-name" value="${Main-class}" />
    <property name="src-dir" location="." />
    <property name="bin-dir" location="./bin" />
    <property name="dist-dir" location="./" />
    <property name="junit-jar" location="./junit-4.12.jar" />
    <property name="hamcrest-jar" location="./hamcrest-core-1.3.jar" />
    <property name="checkstyle-jar" location="./checkstyle-8.3-all.jar" />
    <property name="checkstyle-config" location="./checkstyle-config.xml" />

    <!-- If you use third party libraries, you'll have to modify the classpath. -->
    <path id="classpath.base">
    </path>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--  Ideally, you'll never have to touch anything below.  -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property file="build.properties"/>

    <path id="classpath.test">
        <pathelement location="${junit-jar}" />
        <pathelement location="${hamcrest-jar}" />
        <pathelement location="${bin-dir}" />
        <path refid="classpath.base" />
    </path>

    <path id="classpath.run">
        <pathelement location="${bin-dir}" />
        <path refid="classpath.base" />
    </path>

    <target name="checkstyle">
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" 
            classpath="${checkstyle-jar}"/>
        <checkstyle config = "${checkstyle-config}"
                    failOnViolation="true" maxWarnings="0" maxErrors="0">
            <fileset dir="${src-dir}" includes="**/*.java"/>
            <formatter type="plain" usefile="false"/>
        </checkstyle>
    </target>

    <target name="compile">
        <mkdir dir="${bin-dir}" />
        <javac srcdir="${src-dir}" destdir="${bin-dir}"
               verbose="false" includeantruntime="false"
               debug="on">
            <classpath refid="classpath.test" />
        </javac>
    </target>

    <!-- Please note: This is no ideal "jar" target since it does not exclude
         test-classes. It could easily be done by splitting normal source
         and test source folders or by using naming conventions and "exclude".
         But we want to avoid  any trouble for you that would be caused
         by multiple source folders or if a non-test-class ends on "...Test" -->
    <target name="jar" depends="compile">
        <jar destfile="${dist-dir}/${jar-name}.jar" basedir="${bin-dir}">
            <manifest>
                <attribute name="Main-Class" value="${Main-class}" />
            </manifest>
        </jar>
    </target>

    <target name="clean">
        <delete verbose="true" quiet="true">
            <fileset dir="${bin-dir}" includes="**/*.class" />
            <fileset dir="${dist-dir}" includes="${jar-name}.jar" />
        </delete>
        <delete dir="${bin-dir}" />
    </target>

    <target name="test" depends="compile">
        <junit haltonfailure="yes" haltonerror="yes">
            <classpath refid="classpath.test" />
            <batchtest fork="yes">
                <formatter type="plain" usefile="false"/>
                <fileset dir="${src-dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="all" depends="test, checkstyle, jar" />
</project>
